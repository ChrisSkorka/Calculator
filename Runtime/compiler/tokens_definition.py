from compiler.abstract_syntax_tree import *
from compiler.constants import *

ans = {
    'symbol':           '_',
    'syntax_type':      VALUE,
    'precedence':       16,
    'continuing':       False,
    'function':         'literal',
    'builder':          ValueTokenNodeBuilder,
    'associativity':    RIGHT_ASSOCIATIVE,
}

call = {
    'symbol':           'call',
    'syntax_type':      INFIX,
    'precedence':       16,
    'continuing':       False,
    'function':         'call',
    'builder':          InfixOperatorTokenNodeBuilder,
    'associativity':    LEFT_ASSOCIATIVE,
}

# values type
# -----------------------------------------------------------------------------
values = [

    # 16 values

    {   'regex':            r"""([+-]?(?:(?:[\d]+\.[\d]*|\.?[\d]+)(?:[eE][+-]?[\d]+)?|(?:Infinity|Inf))|[+-]?(?:NaN[\d]*|sNaN[\d]*))""", # exact decimal.Decimal(...) syntax
        # 'regex':            r"""((?:(?:[\d]+\.[\d]*|\.?[\d]+)(?:[eE][+-]?[\d]+)?|(?:Infinity|Inf))|[+-]?(?:NaN[\d]*|sNaN[\d]*))""", # decimal.Decimal(...) syntax without leading sign
        # 'regex':            r"""((([\.][0-9]+)|([0-9]+[\.]?[0-9]*))([eE][-+]?[0-9]+)?)""",
        'syntax_type':      VALUE,
        'precedence':       16,
        'continuing':       False,
        'callable':         True,
        'function':         'number',
        'builder':          ValueTokenNodeBuilder,
        'associativity':    RIGHT_ASSOCIATIVE,
    },
    {   'regex':            r"""([+-]?(?:0[bodx]|[\d]+r)[\d\w]+)""",
        'syntax_type':      VALUE,
        'precedence':       16,
        'continuing':       False,
        'callable':         True,
        'function':         'integer',
        'builder':          ValueTokenNodeBuilder,
        'associativity':    RIGHT_ASSOCIATIVE,
    },
    {   'regex':            r"""((\""".*?\""")|('''.*?''')|(".*?")|('.*?'))""",
        'syntax_type':      VALUE,
        'precedence':       16,
        'continuing':       False,
        'callable':         True,
        'function':         'string',
        'builder':          ValueTokenNodeBuilder,
        'associativity':    RIGHT_ASSOCIATIVE,
    },
    {   'regex':            r"""([A-Za-z_][A-Za-z0-9_]*)""",
        'syntax_type':      VALUE,
        'precedence':       16,
        'continuing':       False,
        'callable':         True,
        'function':         'literal',
        'builder':          ValueTokenNodeBuilder,
        'associativity':    RIGHT_ASSOCIATIVE,
    },
    {   'regex':            r"""(\/\/.*)""",
        'syntax_type':      VALUE,
        'precedence':       16,
        'continuing':       False,
        'function':         'comment',
        'non_code':         True,
    },
    
    # 16 groupings

    {   'symbol':           '(',
        'syntax_type':      VALUE,
        'precedence':       16,
        'continuing':       False,
        'callable':         True,
        'function':         'round_group',
        'builder':          ItemListTokenNodeBuilder,
        'associativity':    RIGHT_ASSOCIATIVE,
    },
    {   'symbol':           '[',
        'syntax_type':      VALUE,
        'precedence':       16,
        'continuing':       False,
        'callable':         True,
        'function':         'square_group',
        'builder':          ItemListTokenNodeBuilder,
        'associativity':    RIGHT_ASSOCIATIVE,
    },
    {   'symbol':           '{',
        'syntax_type':      VALUE,
        'precedence':       16,
        'continuing':       False,
        'callable':         True,
        'function':         'curly_group',
        'builder':          ItemListTokenNodeBuilder,
        'associativity':    RIGHT_ASSOCIATIVE,
    },
    {   'symbol':           '|',
        'syntax_type':      VALUE,
        'precedence':       16,
        'continuing':       False,
        'callable':         True,
        'function':         'straight_group',
        'builder':          ItemListTokenNodeBuilder,
        'associativity':    RIGHT_ASSOCIATIVE,
    },
]

called_values = [{**t, 'preceding_token': call} for t in values if t.get('callable', False)]

infix_operators = [
    
    # 0 assignment

    {   'symbol':           '=',
        'syntax_type':      INFIX,
        'precedence':       0,
        'continuing':       False,
        'function':         None,
        'builder':          InfixOperatorTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },

    # 2 codeblock

    {   'symbol':           ':',
        'syntax_type':      INFIX,
        'precedence':       2,
        'continuing':       True,
        'function':         'colon',
        'builder':          CodeBlockTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },

    # 3 locical 1

    {   'symbol':           'or',
        'syntax_type':      INFIX,
        'precedence':       3,
        'continuing':       True,
        'function':         'or',
        'builder':          InfixOperatorTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },

    # 4 locical 2

    {   'symbol':           'and',
        'syntax_type':      INFIX,
        'precedence':       4,
        'continuing':       True,
        'function':         'and',
        'builder':          InfixOperatorTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },

    # 6 comparitors

    {   'symbol':           '==',
        'syntax_type':      INFIX,
        'precedence':       6,
        'continuing':       True,
        'function':         'equals',
        'chain':            ChainComparitorTokenNodeBuilder,
        'builder':          InfixOperatorTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },
    {   'symbol':           '!=',
        'syntax_type':      INFIX,
        'precedence':       6,
        'continuing':       True,
        'function':         'not_equals',
        'chain':            ChainComparitorTokenNodeBuilder,
        'builder':          InfixOperatorTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },
    {   'symbol':           '<=',
        'syntax_type':      INFIX,
        'precedence':       6,
        'continuing':       True,
        'function':         'less_than_equals',
        'chain':            ChainComparitorTokenNodeBuilder,
        'builder':          InfixOperatorTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },
    {   'symbol':           '>=',
        'syntax_type':      INFIX,
        'precedence':       6,
        'continuing':       True,
        'function':         'greater_than_equals',
        'chain':            ChainComparitorTokenNodeBuilder,
        'builder':          InfixOperatorTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },
    {   'symbol':           '<',
        'syntax_type':      INFIX,
        'precedence':       6,
        'continuing':       True,
        'function':         'less_than',
        'chain':            ChainComparitorTokenNodeBuilder,
        'builder':          InfixOperatorTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },
    {   'symbol':           '>',
        'syntax_type':      INFIX,
        'precedence':       6,
        'continuing':       True,
        'function':         'greater_than',
        'chain':            ChainComparitorTokenNodeBuilder,
        'builder':          InfixOperatorTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },

    # 7 bitwise1
    # 8 bitwise2
    # 9 bitwise3

    # 10 range

    {   'symbol':           '->',
        'syntax_type':      INFIX,
        'precedence':       10,
        'continuing':       False,
        'function':         'range',
        'builder':          InfixOperatorTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },
    {   'symbol':           '@',
        'syntax_type':      INFIX,
        'precedence':       10,
        'continuing':       False,
        'function':         'at',
        'builder':          InfixOperatorTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },

    # 11 arithmetic1

    {   'symbol':           '+',
        'syntax_type':      INFIX,
        'precedence':       11,
        'continuing':       True,
        'function':         'add',
        'builder':          InfixOperatorTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },
    {   'symbol':           '-',
        'syntax_type':      INFIX,
        'precedence':       11,
        'continuing':       True,
        'function':         'sub',
        'builder':          InfixOperatorTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },

    # 12 arithmetic2

    {   'symbol':           '*',
        'syntax_type':      INFIX,
        'precedence':       12,
        'continuing':       True,
        'function':         'mul',
        'builder':          InfixOperatorTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },
    {   'symbol':           '/',
        'syntax_type':      INFIX,
        'precedence':       12,
        'continuing':       True,
        'function':         'div',
        'builder':          InfixOperatorTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },
    {   'symbol':           '#',
        'syntax_type':      INFIX,
        'precedence':       12,
        'continuing':       True,
        'function':         'matmul',
        'builder':          InfixOperatorTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },
    {   'symbol':           '.*',
        'syntax_type':      INFIX,
        'precedence':       12,
        'continuing':       True,
        'function':         'dotmul',
        'builder':          InfixOperatorTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },  

    # 13 arithmetic3

    {   'symbol':           '^',
        'syntax_type':      INFIX,
        'precedence':       13,
        'continuing':       True,
        'function':         'div',
        'builder':          InfixOperatorTokenNodeBuilder,
        'associativity':    RIGHT_ASSOCIATIVE,
    },
    {   'symbol':           '$',
        'syntax_type':      INFIX,
        'precedence':       13,
        'continuing':       False,
        'function':         'root',
        'builder':          InfixOperatorTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },

    # 16 reference

    {   'symbol':           '.',
        'syntax_type':      INFIX,
        'precedence':       16,
        'continuing':       True,
        'function':         'dot',
        'builder':          InfixOperatorTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },
    {   'symbol':           '..',
        'syntax_type':      INFIX,
        'precedence':       16,
        'continuing':       True,
        'function':         'dubble_dot',
        'builder':          InfixOperatorTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },

]

continuing_infix_operators = [{**t, 'preceding_token': ans} for t in infix_operators if t.get('continuing', False)]

prefix_operators = [

    # 1 constructs

    {   'symbol':           'class',
        'syntax_type':      PREFIX,
        'precedence':       1,
        'continuing':       False,
        'callable':         True,
        'function':         'class',
        'builder':          ReferenceCodePairTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },
    {   'symbol':           'function',
        'syntax_type':      PREFIX,
        'precedence':       1,
        'continuing':       False,
        'callable':         True,
        'function':         'function',
        'builder':          ReferenceCodePairTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },
    {   'symbol':           'if',
        'syntax_type':      PREFIX,
        'precedence':       1,
        'continuing':       False,
        'callable':         True,
        'function':         'if',
        'builder':          ValueCodePairTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },
    {   'symbol':           'switch',
        'syntax_type':      PREFIX,
        'precedence':       1,
        'continuing':       False,
        'callable':         True,
        'function':         'switch',
        'builder':          ValueCodePairTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },
    {   'symbol':           'case',
        'syntax_type':      PREFIX,
        'precedence':       1,
        'continuing':       False,
        'function':         'case',
        'builder':          ValueCodePairTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },
    {   'symbol':           'for',
        'syntax_type':      PREFIX,
        'precedence':       1,
        'continuing':       False,
        'callable':         True,
        'function':         'for',
        'builder':          ReferenceCodePairTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },
    {   'symbol':           'while',
        'syntax_type':      PREFIX,
        'precedence':       1,
        'continuing':       False,
        'callable':         True,
        'function':         'while',
        'builder':          ValueCodePairTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },
    {   'symbol':           'else',
        'syntax_type':      PREFIX,
        'precedence':       1,
        'continuing':       False,
        'function':         'else',
        'builder':          CodeTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },
    
    {   'symbol':           'continue',
        'syntax_type':      PREFIX,
        'precedence':       1,
        'continuing':       False,
        'function':         'continue',
        'builder':          ReturnTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },
    {   'symbol':           'break',
        'syntax_type':      PREFIX,
        'precedence':       1,
        'continuing':       False,
        'function':         'break',
        'builder':          ReturnTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },
    {   'symbol':           'return',
        'syntax_type':      PREFIX,
        'precedence':       1,
        'continuing':       False,
        'function':         'return',
        'builder':          ReturnTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },

    # 5 logical3

    {   'symbol':           'not',
        'syntax_type':      PREFIX,
        'precedence':       3,
        'continuing':       False,
        'callable':         True,
        'function':         'not',
        'builder':          PrefixOperatorTokenNodeBuilder,
        'associativity':    RIGHT_ASSOCIATIVE,
    },

    # 14 prefix arithmetic, unlaod

    {   'symbol':           '...',
        'syntax_type':      PREFIX,
        'precedence':       3,
        'continuing':       False,
        'callable':         True,
        'function':         'unload',
        'builder':          PrefixOperatorTokenNodeBuilder,
        'associativity':    RIGHT_ASSOCIATIVE,
    },
    {   'symbol':           '+',
        'syntax_type':      PREFIX,
        'precedence':       12,
        'continuing':       False,
        'function':         'pos',
        'builder':          PrefixOperatorTokenNodeBuilder,
        'associativity':    RIGHT_ASSOCIATIVE,
    },
    {   'symbol':           '-',
        'syntax_type':      PREFIX,
        'precedence':       12,
        'continuing':       False,
        'function':         'neg',
        'builder':          PrefixOperatorTokenNodeBuilder,
        'associativity':    RIGHT_ASSOCIATIVE,
    },
    {   'symbol':           '~',
        'syntax_type':      PREFIX,
        'precedence':       12,
        'continuing':       False,
        'callable':         True,
        'function':         'inv',
        'builder':          PrefixOperatorTokenNodeBuilder,
        'associativity':    RIGHT_ASSOCIATIVE,
    },
    {   'symbol':           '$',
        'syntax_type':      PREFIX,
        'precedence':       12,
        'continuing':       False,
        'function':         'sqrt',
        'builder':          PrefixOperatorTokenNodeBuilder,
        'associativity':    RIGHT_ASSOCIATIVE,
    },
]

called_prefix_operators = [{**t, 'preceding_token': call} for t in prefix_operators if t.get('callable', False)]

postfix_operators = [

    # 15 postfix arithmetic

    {   'symbol':           '!',
        'syntax_type':      POSTFIX,
        'precedence':       13,
        'continuing':       False,
        'function':         'fact',
        'builder':          PostfixOperatorTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },
]

continuing_postfix_operators = [{**t, 'preceding_token': ans} for t in postfix_operators if t.get('continuing', False)]

seperator_signals = [

    # seperators

    {   'symbol':           ',',
        'syntax_type':      SEPERATOR,
        'precedence':       -1,
        'function':         'comma',
        'builder':          SyntaxSignalTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },
    {   'symbol':           ';',
        'syntax_type':      SEPERATOR,
        'precedence':       -1,
        'function':         'semi_column',
        'builder':          SyntaxSignalTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },
    {   'symbol':           '\n',
        'syntax_type':      SEPERATOR,
        'precedence':       -1,
        'function':         'newline',
        'builder':          SyntaxSignalTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },
]

close_signals = [

    # group closers

    {   'symbol':           ')',
        'syntax_type':      END_GROUP,
        'precedence':       -1,
        'continuing':       False,
        'function':         'round_group',
        'builder':          SyntaxSignalTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },
    {   'symbol':           ']',
        'syntax_type':      END_GROUP,
        'precedence':       -1,
        'continuing':       False,
        'function':         'square_group',
        'builder':          SyntaxSignalTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },
    {   'symbol':           '}',
        'syntax_type':      END_GROUP,
        'precedence':       -1,
        'continuing':       False,
        'function':         'curly_group',
        'builder':          SyntaxSignalTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },
    {   'symbol':           '|',
        'syntax_type':      END_GROUP,
        'precedence':       -1,
        'continuing':       False,
        'function':         'straight_group',
        'builder':          SyntaxSignalTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },
]

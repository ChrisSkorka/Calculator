from compiler.abstract_syntax_tree import *

LEFT_ASSOCIATIVE, RIGHT_ASSOCIATIVE = +1, -1 # Left to right, Right to left
KEYWORD, VALUE, INFIX, CONTINUING_INFIX, PREFIX, POSTFIX, CONTINUING_POSTFIX, SEPERATORS, GROUP_OPEN, GROUP_CLOSE = 0,1,2,3,4,5,6,7,8,9

values = [
    {
        'regex':            r"""([+-]?(?:(?:[\d]+\.[\d]*|\.?[\d]+)(?:[eE][+-]?[\d]+)?|(?:Infinity|Inf))|[+-]?(?:NaN[\d]*|sNaN[\d]*))""", # exact decimal.Decimal(...) syntax
        # 'regex':            r"""((?:(?:[\d]+\.[\d]*|\.?[\d]+)(?:[eE][+-]?[\d]+)?|(?:Infinity|Inf))|[+-]?(?:NaN[\d]*|sNaN[\d]*))""", # decimal.Decimal(...) syntax without leading sign
        # 'regex':            r"""((([\.][0-9]+)|([0-9]+[\.]?[0-9]*))([eE][-+]?[0-9]+)?)""",
        'syntax_type':      VALUE,
        'precedence':       9,
        'continuing':       False,
        'function':         'number',
        'builder':          ValueTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },
    {
        'regex':            r"""([+-]?(?:0[bodx]|[\d]+r)[\d\w]+)""",
        'syntax_type':      VALUE,
        'precedence':       9,
        'continuing':       False,
        'function':         'integer',
        'builder':          ValueTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },
    {
        'regex':            r"""((\""".*?\""")|('''.*?''')|(".*?")|('.*?'))""",
        'syntax_type':      VALUE,
        'precedence':       9,
        'continuing':       False,
        'function':         'string',
        'builder':          ValueTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },
    {
        'regex':            r"""([A-Za-z_][A-Za-z0-9_]*)""",
        'syntax_type':      VALUE,
        'precedence':       9,
        'continuing':       False,
        'function':         'literal',
        'builder':          ValueTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },
    {
        'regex':            r"""(\/\/.*)""",
        'syntax_type':      VALUE,
        'precedence':       9,
        'continuing':       False,
        'function':         'comment',
        'non_code':         True,
    },
]

keywords = [
    {
        'symbol':           'class',
        'syntax_type':      KEYWORD,
        'precedence':       0,
        'continuing':       False,
        'function':         'class',
        'builder':          None,
        'associativity':    LEFT_ASSOCIATIVE,
    },
    {
        'symbol':           'function',
        'syntax_type':      KEYWORD,
        'precedence':       0,
        'continuing':       False,
        'function':         'function',
        'builder':          None,
        'associativity':    LEFT_ASSOCIATIVE,
    },
    {
        'symbol':           'if',
        'syntax_type':      KEYWORD,
        'precedence':       0,
        'continuing':       False,
        'function':         'if',
        'builder':          None,
        'associativity':    LEFT_ASSOCIATIVE,
    },
    {
        'symbol':           'ifelse',
        'syntax_type':      KEYWORD,
        'precedence':       0,
        'continuing':       False,
        'function':         'ifelse',
        'builder':          None,
        'associativity':    LEFT_ASSOCIATIVE,
    },
    {
        'symbol':           'else',
        'syntax_type':      KEYWORD,
        'precedence':       0,
        'continuing':       False,
        'function':         'else',
        'builder':          None,
        'associativity':    LEFT_ASSOCIATIVE,
    },
    {
        'symbol':           'switch',
        'syntax_type':      KEYWORD,
        'precedence':       0,
        'continuing':       False,
        'function':         'switch',
        'builder':          None,
        'associativity':    LEFT_ASSOCIATIVE,
    },
    {
        'symbol':           'case',
        'syntax_type':      KEYWORD,
        'precedence':       0,
        'continuing':       False,
        'function':         'case',
        'builder':          None,
        'associativity':    LEFT_ASSOCIATIVE,
    },
    {
        'symbol':           'for',
        'syntax_type':      KEYWORD,
        'precedence':       0,
        'continuing':       False,
        'function':         'for',
        'builder':          None,
        'associativity':    LEFT_ASSOCIATIVE,
    },
    {
        'symbol':           'while',
        'syntax_type':      KEYWORD,
        'precedence':       0,
        'continuing':       False,
        'function':         'while',
        'builder':          None,
        'associativity':    LEFT_ASSOCIATIVE,
    },
    {
        'symbol':           'continue',
        'syntax_type':      KEYWORD,
        'precedence':       0,
        'continuing':       False,
        'function':         'continue',
        'builder':          ReturnTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },
    {
        'symbol':           'break',
        'syntax_type':      KEYWORD,
        'precedence':       0,
        'continuing':       False,
        'function':         'break',
        'builder':          ReturnTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },
    {
        'symbol':           'return',
        'syntax_type':      KEYWORD,
        'precedence':       0,
        'continuing':       False,
        'function':         'return',
        'builder':          ReturnTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },
    {
        'symbol':           '?',
        'syntax_type':      KEYWORD,
        'precedence':       0,
        'continuing':       False,
        'function':         '?',
        'builder':          None,
        'associativity':    LEFT_ASSOCIATIVE,
    },
]

infix_operators = [
    {
        'symbol':           '+',
        'syntax_type':      INFIX,
        'precedence':       3,
        'continuing':       True,
        'function':         'add',
        'builder':          InfixOperatorTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },
    {
        'symbol':           '-',
        'syntax_type':      INFIX,
        'precedence':       3,
        'continuing':       True,
        'function':         'sub',
        'builder':          InfixOperatorTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },
    {
        'symbol':           '*',
        'syntax_type':      INFIX,
        'precedence':       4,
        'continuing':       True,
        'function':         'mul',
        'builder':          InfixOperatorTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },
    {
        'symbol':           '/',
        'syntax_type':      INFIX,
        'precedence':       4,
        'continuing':       True,
        'function':         'div',
        'builder':          InfixOperatorTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },
    {
        'symbol':           '^',
        'syntax_type':      INFIX,
        'precedence':       5,
        'continuing':       True,
        'function':         'div',
        'builder':          InfixOperatorTokenNodeBuilder,
        'associativity':    RIGHT_ASSOCIATIVE,
    },
    {
        'symbol':           '#',
        'syntax_type':      INFIX,
        'precedence':       4,
        'continuing':       True,
        'function':         'matmul',
        'builder':          InfixOperatorTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },
    {
        'symbol':           '.*',
        'syntax_type':      INFIX,
        'precedence':       4,
        'continuing':       True,
        'function':         'dotmul',
        'builder':          InfixOperatorTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },
    {
        'symbol':           '$',
        'syntax_type':      INFIX,
        'precedence':       4,
        'continuing':       False,
        'function':         'root',
        'builder':          InfixOperatorTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },
    {
        'symbol':           '@',
        'syntax_type':      INFIX,
        'precedence':       4,
        'continuing':       False,
        'function':         'at',
        'builder':          InfixOperatorTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },
    {
        'symbol':           '.',
        'syntax_type':      INFIX,
        'precedence':       8,
        'continuing':       True,
        'function':         'dot',
        'builder':          InfixOperatorTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },
    {
        'symbol':           ':',
        'syntax_type':      INFIX,
        'precedence':       8,
        'continuing':       True,
        'function':         'colon',
        'builder':          InfixOperatorTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },
    {
        'symbol':           '->',
        'syntax_type':      INFIX,
        'precedence':       1,
        'continuing':       False,
        'function':         'range',
        'builder':          InfixOperatorTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },
    {
        'symbol':           '==',
        'syntax_type':      INFIX,
        'precedence':       1,
        'continuing':       True,
        'function':         'equals',
        'chain':            ChainComparitorTokenNodeBuilder,
        'builder':          InfixOperatorTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },
    {
        'symbol':           '!=',
        'syntax_type':      INFIX,
        'precedence':       1,
        'continuing':       True,
        'function':         'not_equals',
        'chain':            ChainComparitorTokenNodeBuilder,
        'builder':          InfixOperatorTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },
    {
        'symbol':           '<=',
        'syntax_type':      INFIX,
        'precedence':       1,
        'continuing':       True,
        'function':         'less_than_equals',
        'chain':            ChainComparitorTokenNodeBuilder,
        'builder':          InfixOperatorTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },
    {
        'symbol':           '>=',
        'syntax_type':      INFIX,
        'precedence':       1,
        'continuing':       True,
        'function':         'greater_than_equals',
        'chain':            ChainComparitorTokenNodeBuilder,
        'builder':          InfixOperatorTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },
    {
        'symbol':           '<',
        'syntax_type':      INFIX,
        'precedence':       1,
        'continuing':       True,
        'function':         'less_than',
        'chain':            ChainComparitorTokenNodeBuilder,
        'builder':          InfixOperatorTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },
    {
        'symbol':           '>',
        'syntax_type':      INFIX,
        'precedence':       1,
        'continuing':       True,
        'function':         'greater_than',
        'chain':            ChainComparitorTokenNodeBuilder,
        'builder':          InfixOperatorTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },
    {
        'symbol':           '=',
        'syntax_type':      INFIX,
        'precedence':       0,
        'continuing':       False,
        'function':         None,
        'builder':          InfixOperatorTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },
]

prefix_operators = [
    {
        'symbol':           '...',
        'syntax_type':      PREFIX,
        'precedence':       3,
        'continuing':       False,
        'function':         'unload',
        'builder':          PrefixOperatorTokenNodeBuilder,
        'associativity':    RIGHT_ASSOCIATIVE,
    },
    {
        'symbol':           '+',
        'syntax_type':      PREFIX,
        'precedence':       3,
        'continuing':       False,
        'function':         'pos',
        'builder':          PrefixOperatorTokenNodeBuilder,
        'associativity':    RIGHT_ASSOCIATIVE,
    },
    {
        'symbol':           '-',
        'syntax_type':      PREFIX,
        'precedence':       3,
        'continuing':       False,
        'function':         'neg',
        'builder':          PrefixOperatorTokenNodeBuilder,
        'associativity':    RIGHT_ASSOCIATIVE,
    },
    {
        'symbol':           '~',
        'syntax_type':      PREFIX,
        'precedence':       3,
        'continuing':       False,
        'function':         'inv',
        'builder':          PrefixOperatorTokenNodeBuilder,
        'associativity':    RIGHT_ASSOCIATIVE,
    },
    {
        'symbol':           '$',
        'syntax_type':      PREFIX,
        'precedence':       3,
        'continuing':       False,
        'function':         'sqrt',
        'builder':          PrefixOperatorTokenNodeBuilder,
        'associativity':    RIGHT_ASSOCIATIVE,
    },
]

postfix_operators = [
    {
        'symbol':           '!',
        'syntax_type':      POSTFIX,
        'precedence':       7,
        'continuing':       False,
        'function':         'fact',
        'builder':          PostfixOperatorTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },
]

seperators = [
    {
        'symbol':           ',',
        'syntax_type':      SEPERATORS,
        'function':         'comma',
        'builder':          SyntaxVerticalSignalTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },
    {
        'symbol':           ';',
        'syntax_type':      SEPERATORS,
        'function':         'semi_column',
        'builder':          SyntaxVerticalSignalTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },
    {
        'symbol':           '\n',
        'syntax_type':      SEPERATORS,
        'function':         'newline',
        'builder':          SyntaxVerticalSignalTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },
]

group_open = [
    {
        'symbol':           '(',
        'syntax_type':      GROUP_OPEN,
        'precedence':       0,
        'continuing':       False,
        'function':         'round_group',
        'builder':          GroupTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },
    {
        'symbol':           '[',
        'syntax_type':      GROUP_OPEN,
        'precedence':       0,
        'continuing':       False,
        'function':         'square_group',
        'builder':          GroupTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },
    {
        'symbol':           '{',
        'syntax_type':      GROUP_OPEN,
        'precedence':       0,
        'continuing':       False,
        'function':         'curly_group',
        'builder':          GroupTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },
    {
        'symbol':           '|',
        'syntax_type':      GROUP_OPEN,
        'precedence':       0,
        'continuing':       False,
        'function':         'straight_group',
        'builder':          GroupTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },
]

group_close = [
    {
        'symbol':           ')',
        'syntax_type':      GROUP_CLOSE,
        'precedence':       0,
        'continuing':       False,
        'function':         'round_group',
        'builder':          SyntaxVerticalSignalTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },
    {
        'symbol':           ']',
        'syntax_type':      GROUP_CLOSE,
        'precedence':       0,
        'continuing':       False,
        'function':         'square_group',
        'builder':          SyntaxVerticalSignalTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },
    {
        'symbol':           '}',
        'syntax_type':      GROUP_CLOSE,
        'precedence':       0,
        'continuing':       False,
        'function':         'curly_group',
        'builder':          SyntaxVerticalSignalTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },
    {
        'symbol':           '|',
        'syntax_type':      GROUP_CLOSE,
        'precedence':       0,
        'continuing':       False,
        'function':         'straight_group',
        'builder':          SyntaxVerticalSignalTokenNodeBuilder,
        'associativity':    LEFT_ASSOCIATIVE,
    },
]
